////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Welcome to the college course tracker.

David Wisniewski
10/14/2017
Project3
Description:
This class is a linked list container that orders your college classes in order
alphabetically. It calculates your GPA and even allows you to remove that history
class you really wish you had never took and see what your GPA could be like if
you had never taken that class.
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////


#ifndef COLLEGE_H
#define COLLEGE_H
#include "course.h"
#include<iomanip>
#include<string>
#include "node.h"
#include<cstdlib>
#include<iostream>
using namespace std;
////////////////////////////////////////////////////////////////////////////////
class College
{
public:
  College();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Initilizes head to NULL
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  ~College();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Destructs old linked lists that are not being used and gives the memory back
to the OS
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  void add(course& c);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Adds acourse to the linked list and makes sure to maintain the order of the
linked list
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  void display(ostream& outs);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Shows all of the items in the linked list
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////

  College(const College& list);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
The Copy constructor makes a duplicate of the list of college courses
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  void load(istream& ins);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Loads courses in from a data file
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  College& operator = (const College& Classes);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Succesfuly copies the data grom one list to another list if ListA = ListB
ListA is deleated and it becomes identical to ListB
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  College(std::string& n){ n= name; }
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Sets the name of the person
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  void save(ostream& fout);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Saves the contents of the linked list to a data file
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  double gpa();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Returns the GPA of the student
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  double hours();
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Returns the amout of credit hours the user has taken
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////
  void remove(std::string coursename);
////////////////////////////////////////////////////////////////////////////////
/*******************************************************************************
Removes an item from the linked list
*******************************************************************************/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
private:
  std::string name;
  node* head;
};
#endif
////////////////////////////////////////////////////////////////////////////////
